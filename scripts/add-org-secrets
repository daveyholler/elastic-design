#!/bin/bash

# Add the four GitHub organization secrets used for sandbox.elastic.dev to a
# given Elastic repository (assumes the `elastic` org). This requires the
# GitHub CLI (https://cli.github.com/) to be installed, and a GitHub personal
# access token with `admin:org` permissions.

# Usage:
#   ./add-org-secrets <repo>

# Example:
#   ./add-org-secrets docsmobile

set -euo pipefail

org="elastic"

function gh.get-repo-id() {
    repoWithOwner=$1
    # TODO: allow passing the repo with or without the owner (user/org) prefix
    # and determine it from $GITHUB_ORG or $GITHUB_USER
    gh api "/repos/${repoWithOwner}" | jq -r '.id'
}

function gh.add-org-secret() {
    repoId=$1
    secret=$2
    echo "Adding secret ${secret} to ${org}/${repo}"
    gh api -X PUT "/orgs/${org}/actions/secrets/${secret}/repositories/${repoId}"
}

repo=$1
repoId=$(gh.get-repo-id "$org/$repo")

gh.add-org-secret "$repoId" "VERCEL_GITHUB_TOKEN"
gh.add-org-secret "$repoId" "VERCEL_ORG_ID"
# If you're using this script for docs.elastic.co, replace with VERCEL_PROJECT_ID_DOCS_CO
gh.add-org-secret "$repoId" "VERCEL_PROJECT_ID_MIGRATION_SANDBOX"
gh.add-org-secret "$repoId" "VERCEL_TOKEN"

# To use this script to remove access to organization secrets rather than adding
# access, comment out the above four lines, then uncomment the four lines at the
# bottom.

function gh.remove-org-secret() {
    repoId=$1
    secret=$2
    echo "Removing secret ${secret} from ${org}/${repo}"
    gh api -X DELETE "/orgs/${org}/actions/secrets/${secret}/repositories/${repoId}"
}

# gh.remove-org-secret "$repoId" "VERCEL_GITHUB_TOKEN"
# gh.remove-org-secret "$repoId" "VERCEL_ORG_ID"
# # If you're using this script for docs.elastic.co, replace with VERCEL_PROJECT_ID_DOCS_CO
# gh.remove-org-secret "$repoId" "VERCEL_PROJECT_ID_MIGRATION_SANDBOX"
# gh.remove-org-secret "$repoId" "VERCEL_TOKEN"
